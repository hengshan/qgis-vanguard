# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MyPlugin1DockWidget
                                 A QGIS plugin
 Genereate choropleth maps
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-03-07
        git sha              : $Format:%H$
        copyright            : (C) 2022 by WOG
        email                : WOG@wog.gov.sg
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal,QThread,Qt
from qgis.core import *
from qgis.utils import iface

import geopandas as gpd
import seaborn as sb
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import colors

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'my_plugin1_dockwidget_base.ui'))


class MyPlugin1DockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MyPlugin1DockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        # change curent work directory to the qgis-vanguard folder
        os.chdir(r'C:\Users\user\Desktop\Projects\qgis-vanguard')

        self.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
        self.mMapLayerComboBox.layerChanged['QgsMapLayer*'].connect(self.mFieldComboBox.setLayer)

        # connect the function to button click event 
        self.btn_Map.clicked.connect(self.generateMultiMaps)

        self.comboBox_rows.addItems(np.arange(1,6,1).astype(str))
        self.comboBox_columns.addItems(np.arange(1,6,1).astype(str))
        self.mMapLayerComboBox.layerChanged['QgsMapLayer*'].connect(self.updateListWidget)

    def generateMap(self):

        # Set up figure and axes
        f, axs = plt.subplots(nrows=1, ncols=1, figsize=(24, 24))

        # convert QGIS vector layer to geopandas 
        my_df = self.convertToGeoPandas(self.mMapLayerComboBox.currentLayer())

        # plot geopandas
        my_df.plot(column=self.mFieldComboBox.currentField(), cmap='viridis', scheme='quantiles',
                    k=5, edgecolor='white', linewidth=0.1, alpha=0.75, legend=True, ax=axs)
        axs.set_aspect('equal')
        axs.set_axis_off()
        axs.set_title(self.mFieldComboBox.currentField())

        plt.show()

    def generateMultiMaps(self):
        selectedItems=[i.text() for i in self.listWidget.selectedItems()]
        if len(selectedItems)==0:
            iface.messageBar().pushMessage('select fields first')
            return

        # Set up figure and axes
        f, axs = plt.subplots(nrows=int(self.comboBox_rows.currentText()), ncols=int(self.comboBox_columns.currentText()), figsize=(24, 24))
        # Make the axes accessible with single indexing

        if len(f.get_axes())==1 and len(selectedItems)==1:
            self.convertToGeoPandas(self.mMapLayerComboBox.currentLayer()).plot(column=selectedItems[0], cmap='viridis', scheme='quantiles',
                    k=5, edgecolor='white', linewidth=0.1, alpha=0.75, legend=True, ax=axs)
            axs.set_aspect('equal')
            axs.set_axis_off()
            axs.set_title(selectedItems[0])

        elif len(selectedItems)>len(f.get_axes()):
            iface.messageBar().pushMessage('increase plot slots or decrease selected items')
            return

        else:
            axs = axs.flatten()
            self.mMapLayerComboBox.currentLayer()
            for i,item in enumerate(selectedItems):
                ax = axs[i]
                self.convertToGeoPandas(self.mMapLayerComboBox.currentLayer()).plot(column=item, cmap='viridis', scheme='quantiles',
                        k=5, edgecolor='white', linewidth=0.1, alpha=0.75, legend=True, ax=ax)
                ax.set_aspect('equal')
                ax.set_axis_off()
                ax.set_title(item)

        plt.show() 

    def convertToPandas(self, layer):
        columns = [f.name() for f in layer.fields()] + ['geometry']
        columns_types = [f.typeName() for f in layer.fields()] # We exclude the geometry. Human readable
        # or
        # columns_types = [f.type() for f in layer.fields()] # QVariant type
        row_list = []
        for f in layer.getFeatures():
            row_list.append(dict(zip(columns, f.attributes() + [f.geometry().asWkt()])))

        df = pd.DataFrame(row_list, columns=columns)
        df['geometry'] = gpd.GeoSeries.from_wkt(df['geometry'])
        return df
    
    def convertToGeoPandas(self, layer):
        if layer is not None:
            gdf = gpd.GeoDataFrame(self.convertToPandas(layer), geometry='geometry')
            gdf = gdf.set_crs(crs=layer.crs().toWkt())
            return gdf

    def updateListWidget(self):
        self.listWidget.clear()
        self.listWidget.addItems([f.name() for f in self.mMapLayerComboBox.currentLayer().fields()])

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
